// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/gustavooferreira/news-app-feeds-mgmt-service/pkg/core/entities"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddFeed provides a mock function with given fields: feed
func (_m *Repository) AddFeed(feed entities.Feed) error {
	ret := _m.Called(feed)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Feed) error); ok {
		r0 = rf(feed)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFeed provides a mock function with given fields: url
func (_m *Repository) DeleteFeed(url string) error {
	ret := _m.Called(url)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFeeds provides a mock function with given fields: provider, category, enabled
func (_m *Repository) GetFeeds(provider string, category string, enabled bool) (entities.Feeds, error) {
	ret := _m.Called(provider, category, enabled)

	var r0 entities.Feeds
	if rf, ok := ret.Get(0).(func(string, string, bool) entities.Feeds); ok {
		r0 = rf(provider, category, enabled)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.Feeds)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(provider, category, enabled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields:
func (_m *Repository) HealthCheck() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFeedState provides a mock function with given fields: url, enabled
func (_m *Repository) SetFeedState(url string, enabled bool) error {
	ret := _m.Called(url, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(url, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
